---
name: Docker

on:
  workflow_call:
    inputs:
      ECR_REPO:
        required: false
        type: string
    secrets:
        AWS_ACCESS_KEY_ID:
            description: "access key"
            required: true
        AWS_SECRET_ACCESS_KEY:
            description: "secret key"
            required: true

jobs:
  main:
    name: "Build Image"
    runs-on: ubuntu-latest

    steps:
      - name: Print event data
        env:
         EVENT: ${{ toJSON( github.event ) }}
        run: echo "$EVENT"

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v5.1

      - name: Configure AWS credentials
        id: Creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Checkout Repository
        id: Checkout
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Repo Name
        id: WriteRepoName
        run: |
          echo "${{ inputs.ECR_REPO }}"
          if [ -n "${{ inputs.ECR_REPO }}" ]; then
              echo "REPOSITORY_NAME=${{ inputs.ECR_REPO }}" >> $GITHUB_ENV
          else
              echo "REPOSITORY_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
          fi

      - name: Set Image Tag
        id: WriteImageTag
        run: |
            if [[ ${{ steps.branch-name.outputs.current_branch }} == "6.0-production" ]]; then
                echo IMAGE_TAG="latest" >> $GITHUB_ENV
            elif [[ ${{ steps.branch-name.outputs.current_branch }} == "6.0-staging" ]]; then
                echo IMAGE_TAG="stg" >> $GITHUB_ENV
            else
                echo IMAGE_TAG="dev" >> $GITHUB_ENV
            fi

      - name: Enable Docker Squash
        id: Docker_Squash
        run: |
         sudo bash -c 'echo \{\"cgroup-parent\":\"/actions_job\",\"experimental\":true\}' | sudo tee /etc/docker/daemon.json
         sudo systemctl restart docker.service

      - name: Build, Squash, tag, and push image to Amazon ECR
        working-directory: docker
        env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build --squash -t "${ECR_REGISTRY}"/"${REPOSITORY_NAME}":${IMAGE_TAG} .
          docker push --all-tags "${ECR_REGISTRY}"/"${REPOSITORY_NAME}"